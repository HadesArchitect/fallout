#!/bin/bash

# This script is intended to be run from a tox.ini.  It handles running testenv
# commands in a jenkins environment; this has special requirements:
#
# * Jenkins will set a build to FAILED if the build script exits with
#   a non-zero exit code.  FAILED indicates something pathological
#   (missing dependencies; the test framework failing; etc.);
#   test failures should set the build to UNSTABLE, which is done
#   by writing the test failures to a JUnit XML-formatted file.
#
# * tox-helper handles this by checking the automatically set TOX_ENV_NAME
#   envvar to see if this is a CI environment, and adjusting its behaviour
#   accordingly.
#
# In CI environments:
#
# * testenv commands should not return non-zero exit codes;
#   instead, the overall status should be managed by flag files:
#
#   * $BUILD_DIR/failed.txt indicates failure
#   * $BUILD_DIR/completed.txt indicates completion
#
# * testenv commands that don't create their own JUnit XML files should have
#   their output wrapped as JUnit XML using the wrap-with-junit-xml helper
#   script

thisdir="$(cd "$(dirname "$0")" && pwd)"

error()
{
    echo "Error: $*" 1>&2
    exit 1
}

# Tox implicitly sets TOX_ENV_NAME; the other envvars should be set in tox.ini

[[ -n "$BUILD_DIR" ]] || error "BUILD_DIR not set"
[[ -n "$TOX_ENV_NAME" ]] || error "TOX_ENV_NAME not set"
[[ -n "$JUNIT_REPORTS_DIR" ]] || error "JUNIT_REPORTS_DIR not set"

exec_if_not_ci()
{
    [[ $TOX_ENV_NAME != *-ci ]] && exec "$@"
}

# =============================================================================
# Commands: these commands are responsible for abstracting the details of
# running a testenv in CI and non-CI environments.

# Create a clean environment
cmd_begin()
{
    exec_if_not_ci true
    rm -fr "$BUILD_DIR"
    mkdir -p "$BUILD_DIR"
    mkdir -p "$JUNIT_REPORTS_DIR"
}

# Run a command.  In CI environments, suppress exit code and write
# $BUILD_DIR/failure.txt on failure instead.
cmd_run()
{
    exec_if_not_ci "$@"
    "$@" || touch "$BUILD_DIR/failure.txt"
}

# As run, but in CI environments also wrap the output in JUnit XML as
# $JUNIT_REPORTS_DIR/$TOX_ENV_NAME.$cmd.results.xml
cmd_run_xml()
{
    exec_if_not_ci "$@"

    local cmd="${1?no operation_name}"

    "$@" | tee "$BUILD_DIR/$cmd.results.txt"

    "$thisdir/wrap-with-junit-xml" "$TOX_ENV_NAME.$cmd" \
        "$BUILD_DIR/$cmd.results.txt" > \
        "$JUNIT_REPORTS_DIR/$TOX_ENV_NAME.$cmd.results.xml"
}

# In CI environments, create $BUILD_DIR/complete.txt
cmd_end()
{
    exec_if_not_ci true
    touch "$BUILD_DIR/complete.txt"
}


# =============================================================================

cmd="$1"
shift

case "$cmd" in
    begin|end|run|run-xml) "cmd_${cmd/-/_}" "$@"; ;;
    *) error "Unknown command $cmd"; ;;
esac
